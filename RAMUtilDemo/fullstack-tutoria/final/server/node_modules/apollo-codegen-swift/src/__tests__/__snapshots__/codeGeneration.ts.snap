// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a mutation with variables 1`] = `
"public final class CreateReviewMutation: GraphQLMutation {
  public let operationDefinition =
    \\"mutation CreateReview($episode: Episode) {\\\\n  createReview(episode: $episode, review: {stars: 5, commentary: \\\\\\"Wow!\\\\\\"}) {\\\\n    stars\\\\n    commentary\\\\n  }\\\\n}\\"

  public var episode: Episode?

  public init(episode: Episode? = nil) {
    self.episode = episode
  }

  public var variables: GraphQLMap? {
    return [\\"episode\\": episode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Mutation\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"createReview\\", arguments: [\\"episode\\": GraphQLVariable(\\"episode\\"), \\"review\\": [\\"stars\\": 5, \\"commentary\\": \\"Wow!\\"]], type: .object(CreateReview.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createReview: CreateReview? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Mutation\\", \\"createReview\\": createReview.flatMap { (value: CreateReview) -> ResultMap in value.resultMap }])
    }

    public var createReview: CreateReview? {
      get {
        return (resultMap[\\"createReview\\"] as? ResultMap).flatMap { CreateReview(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"createReview\\")
      }
    }

    public struct CreateReview: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Review\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField(\\"stars\\", type: .nonNull(.scalar(Int.self))),
        GraphQLField(\\"commentary\\", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(stars: Int, commentary: String? = nil) {
        self.init(unsafeResultMap: [\\"__typename\\": \\"Review\\", \\"stars\\": stars, \\"commentary\\": commentary])
      }

      /// The number of stars this review gave, 1-5
      public var stars: Int {
        get {
          return resultMap[\\"stars\\"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: \\"stars\\")
        }
      }

      /// Comment about the movie
      public var commentary: String? {
        get {
          return resultMap[\\"commentary\\"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: \\"commentary\\")
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with a fragment spread nested in an inline fragment 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public let operationDefinition =
    \\"query Hero {\\\\n  hero {\\\\n    ... on Droid {\\\\n      ...HeroDetails\\\\n    }\\\\n  }\\\\n}\\"

  public var queryDocument: String { return operationDefinition.appending(HeroDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"hero\\", type: .object(Hero.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(hero: Hero? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Query\\", \\"hero\\": hero.flatMap { (value: Hero) -> ResultMap in value.resultMap }])
    }

    public var hero: Hero? {
      get {
        return (resultMap[\\"hero\\"] as? ResultMap).flatMap { Hero(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLTypeCase(
          variants: [\\"Droid\\": AsDroid.selections],
          default: [
          ]
        )
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeHuman() -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\"])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      public var asDroid: AsDroid? {
        get {
          if !AsDroid.possibleTypes.contains(__typename) { return nil }
          return AsDroid(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsDroid: GraphQLSelectionSet {
        public static let possibleTypes = [\\"Droid\\"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(name: String) {
          self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
        }

        /// What others call this droid
        public var name: String {
          get {
            return resultMap[\\"name\\"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: \\"name\\")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var heroDetails: HeroDetails {
            get {
              return HeroDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with conditional fragment spreads 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public let operationDefinition =
    \\"query Hero {\\\\n  hero {\\\\n    ...DroidDetails\\\\n  }\\\\n}\\"

  public var queryDocument: String { return operationDefinition.appending(DroidDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"hero\\", type: .object(Hero.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(hero: Hero? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Query\\", \\"hero\\": hero.flatMap { (value: Hero) -> ResultMap in value.resultMap }])
    }

    public var hero: Hero? {
      get {
        return (resultMap[\\"hero\\"] as? ResultMap).flatMap { Hero(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLTypeCase(
          variants: [\\"Droid\\": AsDroid.selections],
          default: [
          ]
        )
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeHuman() -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\"])
      }

      public static func makeDroid(primaryFunction: String? = nil) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"primaryFunction\\": primaryFunction])
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var droidDetails: DroidDetails? {
          get {
            if !DroidDetails.possibleTypes.contains(resultMap[\\"__typename\\"]! as! String) { return nil }
            return DroidDetails(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap += newValue.resultMap
          }
        }
      }

      public var asDroid: AsDroid? {
        get {
          if !AsDroid.possibleTypes.contains(__typename) { return nil }
          return AsDroid(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsDroid: GraphQLSelectionSet {
        public static let possibleTypes = [\\"Droid\\"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField(\\"primaryFunction\\", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(primaryFunction: String? = nil) {
          self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"primaryFunction\\": primaryFunction])
        }

        /// This droid's primary function
        public var primaryFunction: String? {
          get {
            return resultMap[\\"primaryFunction\\"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: \\"primaryFunction\\")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var droidDetails: DroidDetails {
            get {
              return DroidDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with fragment spreads 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public let operationDefinition =
    \\"query Hero {\\\\n  hero {\\\\n    ...HeroDetails\\\\n  }\\\\n}\\"

  public var queryDocument: String { return operationDefinition.appending(HeroDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"hero\\", type: .object(Hero.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(hero: Hero? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Query\\", \\"hero\\": hero.flatMap { (value: Hero) -> ResultMap in value.resultMap }])
    }

    public var hero: Hero? {
      get {
        return (resultMap[\\"hero\\"] as? ResultMap).flatMap { Hero(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return resultMap[\\"name\\"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: \\"name\\")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var heroDetails: HeroDetails {
          get {
            return HeroDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with variables 1`] = `
"public final class HeroNameQuery: GraphQLQuery {
  public let operationDefinition =
    \\"query HeroName($episode: Episode) {\\\\n  hero(episode: $episode) {\\\\n    name\\\\n  }\\\\n}\\"

  public var episode: Episode?

  public init(episode: Episode? = nil) {
    self.episode = episode
  }

  public var variables: GraphQLMap? {
    return [\\"episode\\": episode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"hero\\", arguments: [\\"episode\\": GraphQLVariable(\\"episode\\")], type: .object(Hero.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(hero: Hero? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Query\\", \\"hero\\": hero.flatMap { (value: Hero) -> ResultMap in value.resultMap }])
    }

    public var hero: Hero? {
      get {
        return (resultMap[\\"hero\\"] as? ResultMap).flatMap { Hero(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return resultMap[\\"name\\"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: \\"name\\")
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration with an operationIdentifier property when generateOperationIds is specified 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public let operationDefinition =
    \\"query Hero {\\\\n  hero {\\\\n    ...HeroDetails\\\\n  }\\\\n}\\"

  public let operationIdentifier: String? = \\"90d0d674eb6a7b33776f63200d6cec3d09f881247c360a2ac9a29037a02210c4\\"

  public var queryDocument: String { return operationDefinition.appending(HeroDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"hero\\", type: .object(Hero.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(hero: Hero? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Query\\", \\"hero\\": hero.flatMap { (value: Hero) -> ResultMap in value.resultMap }])
    }

    public var hero: Hero? {
      get {
        return (resultMap[\\"hero\\"] as? ResultMap).flatMap { Hero(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return resultMap[\\"name\\"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: \\"name\\")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var heroDetails: HeroDetails {
          get {
            return HeroDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for a property 1`] = `
"public init(episode: Episode) {
  self.episode = episode
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for an optional property 1`] = `
"public init(episode: Episode? = nil) {
  self.episode = episode
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for multiple properties 1`] = `
"public init(episode: Episode? = nil, scene: String? = nil) {
  self.episode = episode
  self.scene = scene
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment that includes a fragment spread 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentDefinition =
    \\"fragment HeroDetails on Character {\\\\n  name\\\\n  ...MoreHeroDetails\\\\n}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    GraphQLField(\\"appearsIn\\", type: .nonNull(.list(.scalar(Episode.self)))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  public static func makeDroid(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The movies this character appears in
  public var appearsIn: [Episode?] {
    get {
      return resultMap[\\"appearsIn\\"]! as! [Episode?]
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"appearsIn\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(unsafeResultMap: resultMap)
    }
    set {
      resultMap += newValue.resultMap
    }
  }

  public struct Fragments {
    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public var moreHeroDetails: MoreHeroDetails {
      get {
        return MoreHeroDetails(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with a concrete type condition 1`] = `
"public struct DroidDetails: GraphQLFragment {
  public static let fragmentDefinition =
    \\"fragment DroidDetails on Droid {\\\\n  name\\\\n  primaryFunction\\\\n}\\"

  public static let possibleTypes = [\\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    GraphQLField(\\"primaryFunction\\", type: .scalar(String.self)),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(name: String, primaryFunction: String? = nil) {
    self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
  }

  /// What others call this droid
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// This droid's primary function
  public var primaryFunction: String? {
    get {
      return resultMap[\\"primaryFunction\\"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"primaryFunction\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with a subselection 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentDefinition =
    \\"fragment HeroDetails on Character {\\\\n  name\\\\n  friends {\\\\n    name\\\\n  }\\\\n}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    GraphQLField(\\"friends\\", type: .list(.object(Friend.selections))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String, friends: [Friend?]? = nil) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"friends\\": friends.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }])
  }

  public static func makeDroid(name: String, friends: [Friend?]? = nil) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"friends\\": friends.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The friends of the character, or an empty list if they have none
  public var friends: [Friend?]? {
    get {
      return (resultMap[\\"friends\\"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Friend?] in value.map { (value: ResultMap?) -> Friend? in value.flatMap { (value: ResultMap) -> Friend in Friend(unsafeResultMap: value) } } }
    }
    set {
      resultMap.updateValue(newValue.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }, forKey: \\"friends\\")
    }
  }

  public struct Friend: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public static func makeHuman(name: String) -> Friend {
      return Friend(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
    }

    public static func makeDroid(name: String) -> Friend {
      return Friend(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    /// The name of the character
    public var name: String {
      get {
        return resultMap[\\"name\\"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"name\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with an abstract type condition 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentDefinition =
    \\"fragment HeroDetails on Character {\\\\n  name\\\\n  appearsIn\\\\n}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    GraphQLField(\\"appearsIn\\", type: .nonNull(.list(.scalar(Episode.self)))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  public static func makeDroid(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The movies this character appears in
  public var appearsIn: [Episode?] {
    get {
      return resultMap[\\"appearsIn\\"]! as! [Episode?]
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"appearsIn\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should escape reserved keywords in a struct declaration for a selection set 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", alias: \\"private\\", type: .nonNull(.scalar(String.self))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(\`private\`: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"private\\": \`private\`])
  }

  public static func makeDroid(\`private\`: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"private\\": \`private\`])
  }

  /// The name of the character
  public var \`private\`: String {
    get {
      return resultMap[\\"private\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"private\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a nested struct declaration for a selection set with subselections 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"friends\\", type: .list(.object(Friend.selections))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(friends: [Friend?]? = nil) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"friends\\": friends.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }])
  }

  public static func makeDroid(friends: [Friend?]? = nil) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"friends\\": friends.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }])
  }

  /// The friends of the character, or an empty list if they have none
  public var friends: [Friend?]? {
    get {
      return (resultMap[\\"friends\\"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Friend?] in value.map { (value: ResultMap?) -> Friend? in value.flatMap { (value: ResultMap) -> Friend in Friend(unsafeResultMap: value) } } }
    }
    set {
      resultMap.updateValue(newValue.flatMap { (value: [Friend?]) -> [ResultMap?] in value.map { (value: Friend?) -> ResultMap? in value.flatMap { (value: Friend) -> ResultMap in value.resultMap } } }, forKey: \\"friends\\")
    }
  }

  public struct Friend: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public static func makeHuman(name: String) -> Friend {
      return Friend(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
    }

    public static func makeDroid(name: String) -> Friend {
      return Friend(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    /// The name of the character
    public var name: String {
      get {
        return resultMap[\\"name\\"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"name\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a fragment spread nested in an inline fragment 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLTypeCase(
      variants: [\\"Droid\\": AsDroid.selections],
      default: [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]
    )
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var asDroid: AsDroid? {
    get {
      if !AsDroid.possibleTypes.contains(__typename) { return nil }
      return AsDroid(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsDroid: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Droid\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    /// What others call this droid
    public var name: String {
      get {
        return resultMap[\\"name\\"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"name\\")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var heroDetails: HeroDetails {
        get {
          return HeroDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with a conditional field 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLBooleanCondition(variableName: \\"includeName\\", inverted: false, selections: [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String? = nil) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String? = nil) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  /// The name of the character
  public var name: String? {
    get {
      return resultMap[\\"name\\"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with a fragment spread that matches the parent type 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(unsafeResultMap: resultMap)
    }
    set {
      resultMap += newValue.resultMap
    }
  }

  public struct Fragments {
    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public var heroDetails: HeroDetails {
      get {
        return HeroDetails(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with a fragment spread with a more specific type condition 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLTypeCase(
      variants: [\\"Droid\\": AsDroid.selections],
      default: [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]
    )
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(unsafeResultMap: resultMap)
    }
    set {
      resultMap += newValue.resultMap
    }
  }

  public struct Fragments {
    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public var droidDetails: DroidDetails? {
      get {
        if !DroidDetails.possibleTypes.contains(resultMap[\\"__typename\\"]! as! String) { return nil }
        return DroidDetails(unsafeResultMap: resultMap)
      }
      set {
        guard let newValue = newValue else { return }
        resultMap += newValue.resultMap
      }
    }
  }

  public var asDroid: AsDroid? {
    get {
      if !AsDroid.possibleTypes.contains(__typename) { return nil }
      return AsDroid(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsDroid: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Droid\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    /// What others call this droid
    public var name: String {
      get {
        return resultMap[\\"name\\"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"name\\")
      }
    }

    public var fragments: Fragments {
      get {
        return Fragments(unsafeResultMap: resultMap)
      }
      set {
        resultMap += newValue.resultMap
      }
    }

    public struct Fragments {
      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var droidDetails: DroidDetails {
        get {
          return DroidDetails(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with an inline fragment 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [GraphQLSelection] = [
    GraphQLTypeCase(
      variants: [\\"Droid\\": AsDroid.selections],
      default: [
        GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]
    )
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String, primaryFunction: String? = nil) -> Hero {
    return Hero(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
  }

  /// The name of the character
  public var name: String {
    get {
      return resultMap[\\"name\\"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var asDroid: AsDroid? {
    get {
      if !AsDroid.possibleTypes.contains(__typename) { return nil }
      return AsDroid(unsafeResultMap: resultMap)
    }
    set {
      guard let newValue = newValue else { return }
      resultMap = newValue.resultMap
    }
  }

  public struct AsDroid: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Droid\\"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField(\\"name\\", type: .nonNull(.scalar(String.self))),
      GraphQLField(\\"primaryFunction\\", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String, primaryFunction: String? = nil) {
      self.init(unsafeResultMap: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
    }

    /// What others call this droid
    public var name: String {
      get {
        return resultMap[\\"name\\"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"name\\")
      }
    }

    /// This droid's primary function
    public var primaryFunction: String? {
      get {
        return resultMap[\\"primaryFunction\\"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: \\"primaryFunction\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should escape identifiers in cases of enum declaration for a GraphQLEnumType 1`] = `
"public enum AlbumPrivacies: RawRepresentable, Equatable, Hashable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case \`public\`
  case \`private\`
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case \\"PUBLIC\\": self = .public
      case \\"PRIVATE\\": self = .private
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .public: return \\"PUBLIC\\"
      case .private: return \\"PRIVATE\\"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: AlbumPrivacies, rhs: AlbumPrivacies) -> Bool {
    switch (lhs, rhs) {
      case (.public, .public): return true
      case (.private, .private): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should generate a struct declaration for a GraphQLInputObjectType 1`] = `
"/// The input object sent when someone is creating a new review
public struct ReviewInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(stars: Int, commentary: Swift.Optional<String?> = nil, favoriteColor: Swift.Optional<ColorInput?> = nil) {
    graphQLMap = [\\"stars\\": stars, \\"commentary\\": commentary, \\"favorite_color\\": favoriteColor]
  }

  /// 0-5 stars
  public var stars: Int {
    get {
      return graphQLMap[\\"stars\\"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: \\"stars\\")
    }
  }

  /// Comment about the movie, optional
  public var commentary: Swift.Optional<String?> {
    get {
      return graphQLMap[\\"commentary\\"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: \\"commentary\\")
    }
  }

  /// Favorite color, optional
  public var favoriteColor: Swift.Optional<ColorInput?> {
    get {
      return graphQLMap[\\"favorite_color\\"] as! Swift.Optional<ColorInput?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: \\"favorite_color\\")
    }
  }
}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should generate an enum declaration for a GraphQLEnumType 1`] = `
"/// The episodes in the Star Wars trilogy
public enum Episode: RawRepresentable, Equatable, Hashable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// Star Wars Episode IV: A New Hope, released in 1977.
  case newhope
  /// Star Wars Episode V: The Empire Strikes Back, released in 1980.
  case empire
  /// Star Wars Episode VI: Return of the Jedi, released in 1983.
  case jedi
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case \\"NEWHOPE\\": self = .newhope
      case \\"EMPIRE\\": self = .empire
      case \\"JEDI\\": self = .jedi
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .newhope: return \\"NEWHOPE\\"
      case .empire: return \\"EMPIRE\\"
      case .jedi: return \\"JEDI\\"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: Episode, rhs: Episode) -> Bool {
    switch (lhs, rhs) {
      case (.newhope, .newhope): return true
      case (.empire, .empire): return true
      case (.jedi, .jedi): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}"
`;
