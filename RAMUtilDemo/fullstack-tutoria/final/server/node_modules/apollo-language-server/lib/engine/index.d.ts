import { GraphQLDataSource } from "./GraphQLDataSource";
import { GraphQLRequest } from "apollo-link";
import { CheckSchemaVariables } from "./operations/checkSchema";
import { UploadSchemaVariables } from "./operations/uploadSchema";
import { CheckOperationsVariables } from "./operations/checkOperations";
import { RegisterOperationsVariables } from "./operations/registerOperations";
export interface ClientIdentity {
    name?: string;
    version?: string;
    referenceID?: string;
}
export declare type ServiceID = string;
export declare type ClientID = string;
export declare type SchemaTag = string;
export declare type ServiceIDAndTag = [ServiceID, SchemaTag?];
export declare type ServiceSpecifier = string;
export declare type StatsWindowSize = number;
export declare type FieldStats = Map<string, Map<string, number>>;
export declare function noServiceError(service: string | undefined, endpoint?: string): string;
export declare class ApolloEngineClient extends GraphQLDataSource {
    private engineKey;
    private clientIdentity?;
    constructor(engineKey: string, engineEndpoint?: string, clientIdentity?: ClientIdentity | undefined);
    willSendRequest(request: any): void;
    execute(options: GraphQLRequest): Promise<import("apollo-link/lib/types").FetchResult<Record<string, any>, Record<string, any>>>;
    checkSchema(variables: CheckSchemaVariables): Promise<any>;
    uploadSchema(variables: UploadSchemaVariables): Promise<any>;
    checkOperations(variables: CheckOperationsVariables): Promise<any>;
    registerOperations(variables: RegisterOperationsVariables): Promise<any>;
    loadSchemaTagsAndFieldStats(serviceID: string): Promise<[SchemaTag[], FieldStats]>;
}
//# sourceMappingURL=index.d.ts.map