"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_tag_1 = require("graphql-tag");
const graphql_1 = require("graphql");
const engine_1 = require("../../engine");
const config_1 = require("../../config");
class EngineSchemaProvider {
    constructor(config) {
        this.config = config;
    }
    async resolveSchema(override) {
        if (this.schema && (!override || !override.force))
            return this.schema;
        const { engine, client } = this.config;
        if (typeof client.service !== "string") {
            throw new Error(`Service name not found for client, found ${client.service}`);
        }
        if (!this.client) {
            if (!engine.apiKey) {
                throw new Error("ENGINE_API_KEY not found");
            }
            this.client = new engine_1.ApolloEngineClient(engine.apiKey, engine.endpoint);
        }
        const [id, tag = "current"] = config_1.parseServiceSpecificer(client.service);
        const { data, errors } = await this.client.execute({
            query: exports.SCHEMA_QUERY,
            variables: {
                id,
                tag: override && override.tag ? override.tag : tag
            }
        });
        if (errors) {
            throw new Error(errors.map(({ message }) => message).join("\n"));
        }
        if (!data || !data.service.schema) {
            throw new Error(`Unable to get schema from Apollo Engine for service ${id}`);
        }
        this.schema = graphql_1.buildClientSchema(data.service.schema);
        return this.schema;
    }
    onSchemaChange(_handler) {
        throw new Error("Polling of Engine not implemented yet");
        return () => { };
    }
}
exports.EngineSchemaProvider = EngineSchemaProvider;
exports.SCHEMA_QUERY = graphql_tag_1.default `
  query GetSchemaByTag($tag: String!) {
    service: me {
      ... on Service {
        schema(tag: $tag) {
          hash
          __schema: introspection {
            queryType {
              name
            }
            mutationType {
              name
            }
            subscriptionType {
              name
            }
            types {
              ...IntrospectionFullType
            }
            directives {
              name
              description
              locations
              args {
                ...IntrospectionInputValue
              }
            }
          }
        }
      }
    }
  }

  fragment IntrospectionFullType on IntrospectionType {
    kind
    name
    description
    fields {
      name
      description
      args {
        ...IntrospectionInputValue
      }
      type {
        ...IntrospectionTypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...IntrospectionInputValue
    }
    interfaces {
      ...IntrospectionTypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      depreactionReason
    }
    possibleTypes {
      ...IntrospectionTypeRef
    }
  }

  fragment IntrospectionInputValue on IntrospectionInputValue {
    name
    description
    type {
      ...IntrospectionTypeRef
    }
    defaultValue
  }

  fragment IntrospectionTypeRef on IntrospectionType {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
`;
//# sourceMappingURL=engine.js.map