"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_link_1 = require("apollo-link");
const apollo_link_http_1 = require("apollo-link-http");
const graphql_1 = require("graphql");
const http_1 = require("http");
const apollo_env_1 = require("apollo-env");
class IntrospectionSchemaProvider {
    constructor(config) {
        this.config = config;
    }
    async resolveSchema() {
        if (this.schema)
            return this.schema;
        const { skipSSLValidation, url, headers } = this.config;
        const options = Object.assign({ uri: url, fetch: apollo_env_1.fetch }, (skipSSLValidation && { fetchOptions: { agent: new http_1.Agent() } }));
        const { data, errors } = (await apollo_link_1.toPromise(apollo_link_1.execute(apollo_link_http_1.createHttpLink(options), {
            query: graphql_1.parse(graphql_1.getIntrospectionQuery()),
            context: { headers }
        })));
        if (errors && errors.length) {
            throw new Error(errors.map(({ message }) => message).join("\n"));
        }
        if (!data) {
            throw new Error("No data received from server introspection.");
        }
        this.schema = graphql_1.buildClientSchema(data);
        return this.schema;
    }
    onSchemaChange(_handler) {
        throw new Error("Polling of endpoint not implemented yet");
        return () => { };
    }
}
exports.IntrospectionSchemaProvider = IntrospectionSchemaProvider;
//# sourceMappingURL=introspection.js.map