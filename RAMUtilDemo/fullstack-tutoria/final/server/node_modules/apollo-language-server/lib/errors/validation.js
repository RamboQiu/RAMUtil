"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const logger_1 = require("./logger");
function getValidationErrors(schema, document, fragments) {
    const specifiedRulesToBeRemoved = [
        graphql_1.NoUnusedFragmentsRule,
        graphql_1.KnownDirectivesRule
    ];
    const rules = [
        NoAnonymousQueries,
        NoTypenameAlias,
        ...graphql_1.specifiedRules.filter(rule => !specifiedRulesToBeRemoved.includes(rule))
    ];
    const typeInfo = new graphql_1.TypeInfo(schema);
    const context = new graphql_1.ValidationContext(schema, document, typeInfo);
    if (fragments) {
        context._fragments = fragments;
    }
    const visitors = rules.map(rule => rule(context));
    graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, graphql_1.visitInParallel(visitors)));
    return context.getErrors();
}
exports.getValidationErrors = getValidationErrors;
function validateQueryDocument(schema, document) {
    try {
        const validationErrors = getValidationErrors(schema, document);
        if (validationErrors && validationErrors.length > 0) {
            for (const error of validationErrors) {
                logger_1.logError(error);
            }
            throw new logger_1.ToolError("Validation of GraphQL query document failed");
        }
    }
    catch (e) {
        console.error(e);
        throw e;
    }
}
exports.validateQueryDocument = validateQueryDocument;
function NoAnonymousQueries(context) {
    return {
        OperationDefinition(node) {
            if (!node.name) {
                context.reportError(new graphql_1.GraphQLError("Apollo does not support anonymous operations", [
                    node
                ]));
            }
            return false;
        }
    };
}
exports.NoAnonymousQueries = NoAnonymousQueries;
function NoTypenameAlias(context) {
    return {
        Field(node) {
            const aliasName = node.alias && node.alias.value;
            if (aliasName == "__typename") {
                context.reportError(new graphql_1.GraphQLError("Apollo needs to be able to insert __typename when needed, please do not use it as an alias", [node]));
            }
        }
    };
}
exports.NoTypenameAlias = NoTypenameAlias;
//# sourceMappingURL=validation.js.map