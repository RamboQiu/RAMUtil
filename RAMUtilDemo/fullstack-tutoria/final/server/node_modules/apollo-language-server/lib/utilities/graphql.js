"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
function isNode(maybeNode) {
    return maybeNode && typeof maybeNode.kind === "string";
}
exports.isNode = isNode;
function isNamedNode(node) {
    return "name" in node;
}
exports.isNamedNode = isNamedNode;
function highlightNodeForNode(node) {
    switch (node.kind) {
        case graphql_1.Kind.VARIABLE_DEFINITION:
            return node.variable;
        default:
            return isNamedNode(node) ? node.name : node;
    }
}
exports.highlightNodeForNode = highlightNodeForNode;
function getFieldDef(schema, parentType, fieldAST) {
    const name = fieldAST.name.value;
    if (name === graphql_1.SchemaMetaFieldDef.name &&
        schema.getQueryType() === parentType) {
        return graphql_1.SchemaMetaFieldDef;
    }
    if (name === graphql_1.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return graphql_1.TypeMetaFieldDef;
    }
    if (name === graphql_1.TypeNameMetaFieldDef.name &&
        (parentType instanceof graphql_1.GraphQLObjectType ||
            parentType instanceof graphql_1.GraphQLInterfaceType ||
            parentType instanceof graphql_1.GraphQLUnionType)) {
        return graphql_1.TypeNameMetaFieldDef;
    }
    if (parentType instanceof graphql_1.GraphQLObjectType ||
        parentType instanceof graphql_1.GraphQLInterfaceType) {
        return parentType.getFields()[name];
    }
    return undefined;
}
exports.getFieldDef = getFieldDef;
function removeDirectives(ast, directiveNames) {
    if (!directiveNames.length)
        return ast;
    return graphql_1.visit(ast, {
        Directive(node) {
            if (!!directiveNames.find(name => name === node.name.value))
                return null;
            return node;
        }
    });
}
exports.removeDirectives = removeDirectives;
function removeDirectiveAnnotatedFields(ast, directiveNames) {
    if (!directiveNames.length)
        return ast;
    return graphql_1.visit(ast, {
        Field(node) {
            if (node.directives &&
                node.directives.find(directive => !!directiveNames.find(name => name === directive.name.value)))
                return null;
            return node;
        },
        OperationDefinition: {
            leave(node) {
                if (!node.selectionSet.selections.length)
                    return null;
                return node;
            }
        }
    });
}
exports.removeDirectiveAnnotatedFields = removeDirectiveAnnotatedFields;
const typenameField = {
    kind: graphql_1.Kind.FIELD,
    name: { kind: graphql_1.Kind.NAME, value: "__typename" }
};
function withTypenameFieldAddedWhereNeeded(ast) {
    return graphql_1.visit(ast, {
        enter: {
            SelectionSet(node) {
                return Object.assign({}, node, { selections: node.selections.filter(selection => !(selection.kind === "Field" &&
                        selection.name.value === "__typename")) });
            }
        },
        leave(node) {
            if (!(node.kind === "Field" || node.kind === "FragmentDefinition"))
                return undefined;
            if (!node.selectionSet)
                return undefined;
            if (true) {
                return Object.assign({}, node, { selectionSet: Object.assign({}, node.selectionSet, { selections: [typenameField, ...node.selectionSet.selections] }) });
            }
            else {
                return undefined;
            }
        }
    });
}
exports.withTypenameFieldAddedWhereNeeded = withTypenameFieldAddedWhereNeeded;
//# sourceMappingURL=graphql.js.map