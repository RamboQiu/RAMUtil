import { ServiceID, ServiceSpecifier, ClientID, StatsWindowSize } from "./engine";
export interface EngineStatsWindow {
    to: number;
    from: number;
}
export declare const DefaultEngineStatsWindow: {
    to: number;
    from: number;
};
export interface HistoricalEngineStatsWindow extends EngineStatsWindow {
}
export declare type EndpointURI = string;
export interface RemoteServiceConfig {
    name: ServiceID;
    url: EndpointURI;
    headers?: {
        [key: string]: string;
    };
    skipSSLValidation?: boolean;
}
export interface LocalServiceConfig {
    name: ServiceID;
    localSchemaFile: string;
}
export interface EngineConfig {
    endpoint?: EndpointURI;
    frontend?: EndpointURI;
    readonly apiKey?: string;
}
export declare const DefaultEngineConfig: {
    endpoint: string;
    frontend: string;
};
export declare const DefaultConfigBase: {
    includes: string[];
    excludes: string[];
};
export interface ConfigBase {
    includes: string[];
    excludes: string[];
}
export declare type ClientServiceConfig = RemoteServiceConfig | LocalServiceConfig;
export interface ClientConfigFormat extends ConfigBase {
    service?: ServiceSpecifier | ClientServiceConfig;
    name?: ClientID;
    referenceID?: string;
    version?: string;
    clientOnlyDirectives?: string[];
    clientSchemaDirectives?: string[];
    addTypename?: boolean;
    tagName?: string;
    statsWindow?: StatsWindowSize;
}
export declare const DefaultClientConfig: {
    tagName: string;
    clientOnlyDirectives: string[];
    clientSchemaDirectives: string[];
    addTypename: boolean;
    statsWindow: {
        to: number;
        from: number;
    };
    includes: string[];
    excludes: string[];
};
export interface ServiceConfigFormat extends ConfigBase {
    name?: string;
    endpoint?: Exclude<RemoteServiceConfig, "name">;
    localSchemaFile?: string;
}
export declare const DefaultServiceConfig: {
    endpoint: {
        url: string;
    };
    includes: string[];
    excludes: string[];
};
export interface ConfigBaseFormat {
    client?: ClientConfigFormat;
    service?: ServiceConfigFormat;
    engine?: EngineConfig;
}
export declare type ApolloConfigFormat = WithRequired<ConfigBaseFormat, "client"> | WithRequired<ConfigBaseFormat, "service">;
export interface LoadConfigSettings {
    configPath?: string;
    name?: string;
    type?: "service" | "client";
}
export declare type ConfigResult<Config> = {
    config: Config;
    filepath: string;
    isEmpty?: boolean;
} | null;
export declare const projectsFromConfig: (config: ApolloConfigFormat) => (ClientConfig | ServiceConfig)[];
export declare const parseServiceSpecificer: (specifier: string) => [string, (string | undefined)?];
export declare const getServiceName: (config: ApolloConfigFormat) => string | undefined;
export declare class ApolloConfig {
    rawConfig: ApolloConfigFormat;
    isClient: boolean;
    isService: boolean;
    engine: EngineConfig;
    name?: string;
    service?: ServiceConfigFormat;
    client?: ClientConfigFormat;
    private _tag?;
    constructor(rawConfig: ApolloConfigFormat);
    readonly projects: (ClientConfig | ServiceConfig)[];
    tag: string;
    setDefaults({ client, engine, service }: any): void;
}
export declare class ClientConfig extends ApolloConfig {
    client: ClientConfigFormat;
}
export declare class ServiceConfig extends ApolloConfig {
    service: ServiceConfigFormat;
}
export declare function isClientConfig(config: ApolloConfig): config is ClientConfig;
export declare function isLocalServiceConfig(config: ClientServiceConfig): config is LocalServiceConfig;
export declare function isServiceConfig(config: ApolloConfig): config is ServiceConfig;
export declare const loadConfig: ({ configPath, name, type }: LoadConfigSettings) => Promise<ConfigResult<ApolloConfig>>;
//# sourceMappingURL=config.d.ts.map