Object.defineProperty(exports, "__esModule", {
  value: true
});

var _git_log_format_markers = require('./constants/git_log_format_markers');

var parseCommit = function parseCommit(commit) {
  var hash = commit[0];
  var authorName = commit[1];
  var authorEmail = commit[2];
  var date = commit[3];

  var messageIndex = commit.findIndex(function (line) {
    return line.match(_git_log_format_markers.gitLogMessageMarker);
  });
  var fileIndex = commit.findIndex(function (line) {
    return line.match(_git_log_format_markers.gitLogFileMarker);
  });
  var message = commit.slice(messageIndex + 1, fileIndex).join('\n');
  var files = commit.slice(fileIndex + 1);

  var addPattern = /^A\s([^\s]+)/;
  var deletePattern = /^D\s([^\s]+)/;
  var modifyPattern = /^M\s([^\s]+)/;
  var renamePattern = /^R[0-9]+\s(.+)\s(.+)/;

  var filterFileChanges = function filterFileChanges(pattern) {
    return files.reduce(function (accumulator, file) {
      var match = file.match(pattern);
      if (match) {
        accumulator.push({ path: match[1] });
      }

      return accumulator;
    }, []);
  };

  var filesRenamed = files.reduce(function (accumulator, file) {
    var match = file.match(renamePattern);
    if (match) {
      accumulator.push({
        oldPath: match[1],
        newPath: match[2]
      });
    }
    return accumulator;
  }, []);

  var parsedCommit = {
    hash: hash,
    authorName: authorName,
    authorEmail: authorEmail,
    date: date,
    message: message,
    filesAdded: filterFileChanges(addPattern),
    filesDeleted: filterFileChanges(deletePattern),
    filesModified: filterFileChanges(modifyPattern),
    filesRenamed: filesRenamed
  };

  return parsedCommit;
};

exports.default = parseCommit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZV9jb21taXQuanMiXSwibmFtZXMiOlsicGFyc2VDb21taXQiLCJjb21taXQiLCJoYXNoIiwiYXV0aG9yTmFtZSIsImF1dGhvckVtYWlsIiwiZGF0ZSIsIm1lc3NhZ2VJbmRleCIsImZpbmRJbmRleCIsImxpbmUiLCJtYXRjaCIsImZpbGVJbmRleCIsIm1lc3NhZ2UiLCJzbGljZSIsImpvaW4iLCJmaWxlcyIsImFkZFBhdHRlcm4iLCJkZWxldGVQYXR0ZXJuIiwibW9kaWZ5UGF0dGVybiIsInJlbmFtZVBhdHRlcm4iLCJmaWx0ZXJGaWxlQ2hhbmdlcyIsInBhdHRlcm4iLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImZpbGUiLCJwdXNoIiwicGF0aCIsImZpbGVzUmVuYW1lZCIsIm9sZFBhdGgiLCJuZXdQYXRoIiwicGFyc2VkQ29tbWl0IiwiZmlsZXNBZGRlZCIsImZpbGVzRGVsZXRlZCIsImZpbGVzTW9kaWZpZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFRQTs7QUFLQSxJQUFNQSxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsTUFBRCxFQUFpQztBQUNuRCxNQUFNQyxPQUFPRCxPQUFPLENBQVAsQ0FBYjtBQUNBLE1BQU1FLGFBQWFGLE9BQU8sQ0FBUCxDQUFuQjtBQUNBLE1BQU1HLGNBQWNILE9BQU8sQ0FBUCxDQUFwQjtBQUNBLE1BQU1JLE9BQU9KLE9BQU8sQ0FBUCxDQUFiOztBQUVBLE1BQU1LLGVBQWVMLE9BQU9NLFNBQVAsQ0FBaUI7QUFBQSxXQUNwQ0MsS0FBS0MsS0FBTCw2Q0FEb0M7QUFBQSxHQUFqQixDQUFyQjtBQUdBLE1BQU1DLFlBQVlULE9BQU9NLFNBQVAsQ0FBaUI7QUFBQSxXQUFRQyxLQUFLQyxLQUFMLDBDQUFSO0FBQUEsR0FBakIsQ0FBbEI7QUFDQSxNQUFNRSxVQUFVVixPQUFPVyxLQUFQLENBQWFOLGVBQWUsQ0FBNUIsRUFBK0JJLFNBQS9CLEVBQTBDRyxJQUExQyxDQUErQyxJQUEvQyxDQUFoQjtBQUNBLE1BQU1DLFFBQVFiLE9BQU9XLEtBQVAsQ0FBYUYsWUFBWSxDQUF6QixDQUFkOztBQUVBLE1BQU1LLGFBQWEsY0FBbkI7QUFDQSxNQUFNQyxnQkFBZ0IsY0FBdEI7QUFDQSxNQUFNQyxnQkFBZ0IsY0FBdEI7QUFDQSxNQUFNQyxnQkFBZ0Isc0JBQXRCOztBQUVBLE1BQU1DLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQUNDLE9BQUQsRUFBaUM7QUFDekQsV0FBT04sTUFBTU8sTUFBTixDQUFhLFVBQUNDLFdBQUQsRUFBY0MsSUFBZCxFQUF1QjtBQUN6QyxVQUFNZCxRQUFRYyxLQUFLZCxLQUFMLENBQVdXLE9BQVgsQ0FBZDtBQUNBLFVBQUlYLEtBQUosRUFBVztBQUNUYSxvQkFBWUUsSUFBWixDQUFpQixFQUFDQyxNQUFNaEIsTUFBTSxDQUFOLENBQVAsRUFBakI7QUFDRDs7QUFFRCxhQUFPYSxXQUFQO0FBQ0QsS0FQTSxFQU9KLEVBUEksQ0FBUDtBQVFELEdBVEQ7O0FBV0EsTUFBTUksZUFBNkJaLE1BQU1PLE1BQU4sQ0FBYSxVQUFDQyxXQUFELEVBQWNDLElBQWQsRUFBdUI7QUFDckUsUUFBTWQsUUFBUWMsS0FBS2QsS0FBTCxDQUFXUyxhQUFYLENBQWQ7QUFDQSxRQUFJVCxLQUFKLEVBQVc7QUFDVGEsa0JBQVlFLElBQVosQ0FBaUI7QUFDZkcsaUJBQVNsQixNQUFNLENBQU4sQ0FETTtBQUVmbUIsaUJBQVNuQixNQUFNLENBQU47QUFGTSxPQUFqQjtBQUlEO0FBQ0QsV0FBT2EsV0FBUDtBQUNELEdBVGtDLEVBU2hDLEVBVGdDLENBQW5DOztBQVdBLE1BQU1PLGVBQWU7QUFDbkIzQixjQURtQjtBQUVuQkMsMEJBRm1CO0FBR25CQyw0QkFIbUI7QUFJbkJDLGNBSm1CO0FBS25CTSxvQkFMbUI7QUFNbkJtQixnQkFBWVgsa0JBQWtCSixVQUFsQixDQU5PO0FBT25CZ0Isa0JBQWNaLGtCQUFrQkgsYUFBbEIsQ0FQSztBQVFuQmdCLG1CQUFlYixrQkFBa0JGLGFBQWxCLENBUkk7QUFTbkJTO0FBVG1CLEdBQXJCOztBQVlBLFNBQU9HLFlBQVA7QUFDRCxDQXJERDs7a0JBdURlN0IsVyIsImZpbGUiOiJwYXJzZV9jb21taXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7XG4gIEdpdENvbW1pdCxcbiAgRmlsZU1vZGlmaWNhdGlvbixcbiAgRmlsZVJlbmFtZVxufSBmcm9tICcuL3R5cGVzL2dpdF9jb21taXRfdHlwZSc7XG5cbmltcG9ydCB7XG4gIGdpdExvZ01lc3NhZ2VNYXJrZXIsXG4gIGdpdExvZ0ZpbGVNYXJrZXJcbn0gZnJvbSAnLi9jb25zdGFudHMvZ2l0X2xvZ19mb3JtYXRfbWFya2Vycyc7XG5cbmNvbnN0IHBhcnNlQ29tbWl0ID0gKGNvbW1pdDogc3RyaW5nW10pOiBHaXRDb21taXQgPT4ge1xuICBjb25zdCBoYXNoID0gY29tbWl0WzBdO1xuICBjb25zdCBhdXRob3JOYW1lID0gY29tbWl0WzFdO1xuICBjb25zdCBhdXRob3JFbWFpbCA9IGNvbW1pdFsyXTtcbiAgY29uc3QgZGF0ZSA9IGNvbW1pdFszXTtcblxuICBjb25zdCBtZXNzYWdlSW5kZXggPSBjb21taXQuZmluZEluZGV4KGxpbmUgPT5cbiAgICBsaW5lLm1hdGNoKGdpdExvZ01lc3NhZ2VNYXJrZXIpXG4gICk7XG4gIGNvbnN0IGZpbGVJbmRleCA9IGNvbW1pdC5maW5kSW5kZXgobGluZSA9PiBsaW5lLm1hdGNoKGdpdExvZ0ZpbGVNYXJrZXIpKTtcbiAgY29uc3QgbWVzc2FnZSA9IGNvbW1pdC5zbGljZShtZXNzYWdlSW5kZXggKyAxLCBmaWxlSW5kZXgpLmpvaW4oJ1xcbicpO1xuICBjb25zdCBmaWxlcyA9IGNvbW1pdC5zbGljZShmaWxlSW5kZXggKyAxKTtcblxuICBjb25zdCBhZGRQYXR0ZXJuID0gL15BXFxzKFteXFxzXSspLztcbiAgY29uc3QgZGVsZXRlUGF0dGVybiA9IC9eRFxccyhbXlxcc10rKS87XG4gIGNvbnN0IG1vZGlmeVBhdHRlcm4gPSAvXk1cXHMoW15cXHNdKykvO1xuICBjb25zdCByZW5hbWVQYXR0ZXJuID0gL15SWzAtOV0rXFxzKC4rKVxccyguKykvO1xuXG4gIGNvbnN0IGZpbHRlckZpbGVDaGFuZ2VzID0gKHBhdHRlcm4pOiBGaWxlTW9kaWZpY2F0aW9uW10gPT4ge1xuICAgIHJldHVybiBmaWxlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBmaWxlKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IGZpbGUubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaCh7cGF0aDogbWF0Y2hbMV19KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0sIFtdKTtcbiAgfTtcblxuICBjb25zdCBmaWxlc1JlbmFtZWQ6IEZpbGVSZW5hbWVbXSA9IGZpbGVzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGZpbGUpID0+IHtcbiAgICBjb25zdCBtYXRjaCA9IGZpbGUubWF0Y2gocmVuYW1lUGF0dGVybik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBhY2N1bXVsYXRvci5wdXNoKHtcbiAgICAgICAgb2xkUGF0aDogbWF0Y2hbMV0sXG4gICAgICAgIG5ld1BhdGg6IG1hdGNoWzJdXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgcGFyc2VkQ29tbWl0ID0ge1xuICAgIGhhc2gsXG4gICAgYXV0aG9yTmFtZSxcbiAgICBhdXRob3JFbWFpbCxcbiAgICBkYXRlLFxuICAgIG1lc3NhZ2UsXG4gICAgZmlsZXNBZGRlZDogZmlsdGVyRmlsZUNoYW5nZXMoYWRkUGF0dGVybiksXG4gICAgZmlsZXNEZWxldGVkOiBmaWx0ZXJGaWxlQ2hhbmdlcyhkZWxldGVQYXR0ZXJuKSxcbiAgICBmaWxlc01vZGlmaWVkOiBmaWx0ZXJGaWxlQ2hhbmdlcyhtb2RpZnlQYXR0ZXJuKSxcbiAgICBmaWxlc1JlbmFtZWRcbiAgfTtcblxuICByZXR1cm4gcGFyc2VkQ29tbWl0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VDb21taXQ7XG4iXX0=