import { GraphQLNamedType, TypeDefinitionNode, FieldDefinitionNode, EnumValueDefinitionNode, InputValueDefinitionNode } from "graphql";
export declare type Maybe<T> = null | undefined | T;
export declare enum TypeKind {
    SCALAR = "ScalarTypeDefinition",
    OBJECT = "ObjectTypeDefinition",
    INTERFACE = "InterfaceTypeDefinition",
    UNION = "UnionTypeDefinition",
    ENUM = "EnumTypeDefinition",
    INPUT_OBJECT = "InputObjectTypeDefinition",
    LIST = "ListTypeDefinition",
    NON_NULL = "NonNullTypeDefinition"
}
export declare enum ChangeType {
    FAILURE = "FAILURE",
    WARNING = "WARNING",
    NOTICE = "NOTICE"
}
export declare type DiffType = TypeDefinitionNode & {
    change?: Change;
};
export declare type DiffField = FieldDefinitionNode & {
    change?: Change;
};
export declare type DiffInputValue = InputValueDefinitionNode & {
    change?: Change;
};
export declare type DiffEnum = EnumValueDefinitionNode & {
    change?: Change;
};
export interface Change {
    change: ChangeType;
    code: string;
    description: string;
    type?: Maybe<DiffType>;
    field?: Maybe<DiffField | DiffInputValue | DiffEnum>;
    arg?: Maybe<InputValueDefinitionNode>;
}
export interface DiffTypeMap {
    [key: string]: DiffType;
}
export interface TypeMap {
    [key: string]: GraphQLNamedType;
}
//# sourceMappingURL=ast.d.ts.map