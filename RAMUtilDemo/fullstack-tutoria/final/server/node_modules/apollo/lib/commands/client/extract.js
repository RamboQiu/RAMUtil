"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const apollo_engine_reporting_1 = require("apollo-engine-reporting");
const Command_1 = require("../../Command");
const push_1 = require("./push");
const manifestOperationHash = (str) => crypto_1.createHash("sha256")
    .update(str)
    .digest("hex");
const engineSignature = (_TODO_operationAST) => {
    return apollo_engine_reporting_1.defaultSignature(_TODO_operationAST, "TODO");
};
class ClientExtract extends Command_1.ClientCommand {
    async run() {
        const { clientIdentity, operations, filename } = await this.runTasks(({ flags, project, config, args }) => [
            {
                title: "Extracting operations from project",
                task: async (ctx) => {
                    const operations = Object.values(this.project.mergedOperationsAndFragmentsForService).map(operationAST => {
                        const printed = apollo_engine_reporting_1.printWithReducedWhitespace(apollo_engine_reporting_1.sortAST(push_1.hideCertainLiterals(operationAST)));
                        return {
                            signature: manifestOperationHash(printed),
                            document: printed,
                            metadata: {
                                engineSignature: engineSignature(operationAST)
                            }
                        };
                    });
                    ctx.operations = operations;
                    ctx.clientIdentity = config.client;
                }
            },
            {
                title: "Outputing extracted queries",
                task: (ctx, task) => {
                    const filename = args.output;
                    task.title = "Outputing extracted queries to " + filename;
                    ctx.filename = filename;
                    fs_1.writeFileSync(filename, JSON.stringify({ version: 1, operations: ctx.operations }, null, 2));
                }
            }
        ]);
        this.log(`Successfully wrote ${operations.length} operations from the ${clientIdentity.name} client to ${filename}`);
    }
}
ClientExtract.description = "Extract queries from a client";
ClientExtract.flags = Object.assign({}, Command_1.ClientCommand.flags);
ClientExtract.args = [
    {
        name: "output",
        description: "Path to write the extracted queries to",
        required: true,
        default: "manifest.json"
    }
];
exports.default = ClientExtract;
//# sourceMappingURL=extract.js.map