"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const heroku_cli_util_1 = require("heroku-cli-util");
const graphql_tag_1 = require("graphql-tag");
const Command_1 = require("../../Command");
const INFO_QUERY = graphql_tag_1.default `
  query GetSchemaTagInfo($service: ID!, $tag: String = "current") {
    service(id: $service) {
      schema(tag: $tag) {
        hash
        gitContext {
          committer
          commit
        }
        introspection {
          fieldCount
          typeCount
        }
        createdAt
      }
    }
  }
`;
class ServiceDownload extends Command_1.ProjectCommand {
    async run() {
        const { results } = await this.runTasks(({ args, project, flags }) => [
            {
                title: `Getting information about service`,
                task: async (ctx) => {
                    const { data, errors } = await project.engine.execute({
                        query: INFO_QUERY,
                        variables: { tag: flags.tag, service: project.config.name }
                    });
                    if (errors || !data) {
                        this.error(`Error loading service information`);
                        return;
                    }
                    ctx.results = data.service.schema;
                }
            }
        ]);
        const { hash, introspection, createdAt } = results;
        const { fieldCount, typeCount } = introspection;
        this.log("\n");
        heroku_cli_util_1.table([{ hash, types: typeCount, fields: fieldCount, createdAt }], {
            columns: [
                {
                    key: "hash",
                    label: "id",
                    format: (hash) => hash.slice(0, 6)
                },
                { key: "types" },
                { key: "fields" },
                { key: "createdAt", label: "created date" }
            ]
        });
        this.log("\n");
    }
}
ServiceDownload.description = "Download the info of your service from Engine";
ServiceDownload.hidden = true;
ServiceDownload.flags = Object.assign({}, Command_1.ProjectCommand.flags, { tag: command_1.flags.string({
        char: "t",
        description: "The published tag of the schema",
        default: "current"
    }) });
exports.default = ServiceDownload;
//# sourceMappingURL=info.js.map