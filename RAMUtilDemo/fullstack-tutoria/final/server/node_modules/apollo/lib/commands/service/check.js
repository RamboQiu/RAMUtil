"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const heroku_cli_util_1 = require("heroku-cli-util");
const graphql_1 = require("graphql");
const git_1 = require("../../git");
const diff_1 = require("../../diff");
const Command_1 = require("../../Command");
class ServiceCheck extends Command_1.ProjectCommand {
    async run() {
        const { gitContext, checkSchemaResult } = await this.runTasks(({ config, flags, project }) => [
            {
                title: "Checking service for changes",
                task: async (ctx) => {
                    if (!config.name) {
                        throw new Error("No service found to link to Engine");
                    }
                    const schema = await project.resolveSchema({ tag: flags.tag });
                    ctx.gitContext = await git_1.gitInfo();
                    ctx.checkSchemaResult = await project.engine.checkSchema({
                        id: config.name,
                        schema: graphql_1.introspectionFromSchema(schema).__schema,
                        tag: flags.tag,
                        gitContext: ctx.gitContext,
                        frontend: flags.frontend || config.engine.frontend
                    });
                }
            }
        ]);
        const { targetUrl, diffToPrevious } = checkSchemaResult;
        const { changes } = diffToPrevious;
        const failures = changes.filter(({ type }) => type === diff_1.ChangeType.FAILURE);
        if (changes.length === 0) {
            return this.log("\nNo changes present between schemas\n");
        }
        this.log("\n");
        heroku_cli_util_1.table(changes.map(diff_1.format), {
            columns: [
                { key: "type", label: "Change" },
                { key: "code", label: "Code" },
                { key: "description", label: "Description" }
            ]
        });
        this.log("\n");
        if (failures.length > 0) {
            this.exit();
        }
        return;
    }
}
ServiceCheck.aliases = ["schema:check"];
ServiceCheck.description = "Check a service against known operation workloads to find breaking changes";
ServiceCheck.flags = Object.assign({}, Command_1.ProjectCommand.flags, { tag: command_1.flags.string({
        char: "t",
        description: "The published tag to check this service against",
        default: "current"
    }) });
exports.default = ServiceCheck;
//# sourceMappingURL=check.js.map