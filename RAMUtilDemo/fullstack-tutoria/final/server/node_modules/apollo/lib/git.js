"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const ci = require("env-ci");
const git_parse_1 = require("git-parse");
const git = require("git-rev-sync");
const lodash_1 = require("lodash");
const findGitRoot = (start) => {
    start = start || process.cwd();
    if (typeof start === "string") {
        if (start[start.length - 1] !== path.sep)
            start += path.sep;
        start = start.split(path.sep);
    }
    if (!start.length)
        return;
    start.pop();
    const dir = start.join(path.sep);
    if (fs.existsSync(path.join(dir, ".git"))) {
        return path.normalize(dir);
    }
    else {
        return findGitRoot(start);
    }
};
exports.gitInfo = async () => {
    const { isCi, commit, branch, slug, root } = ci();
    const gitLoc = root ? root : findGitRoot();
    if (!commit)
        return;
    let committer;
    let remoteUrl = slug;
    let message;
    if (gitLoc) {
        const _a = await git_parse_1.gitToJs(gitLoc)
            .then((commits) => commits && commits.length > 0
            ? commits[0]
            : { authorName: null, authorEmail: null, message: null })
            .catch(() => ({ authorEmail: null, authorName: null, message: null })), { authorName, authorEmail } = _a, commit = __rest(_a, ["authorName", "authorEmail"]);
        committer = `${authorName || ""} ${authorEmail ? `<${authorEmail}>` : ""}`.trim();
        message = commit.message;
        if (!isCi) {
            try {
                remoteUrl = git.remoteUrl();
            }
            catch (e) { }
        }
    }
    return lodash_1.pickBy({ committer, commit, remoteUrl, message, branch }, lodash_1.identity);
};
//# sourceMappingURL=git.js.map